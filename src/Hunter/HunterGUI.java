/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Hunter;

import Main.Connector;
import Main.Main;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author jingweizhang
 */
public class HunterGUI extends javax.swing.JFrame {

    public HunterGUI() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    

    private int findTheExp(int exp){
        if(exp>100000000){
            return 990000000;
        }else if(exp>30000000){
            return 100000000;
        }else if(exp>5000000){
            return 30000000;
        }else if(exp>2000000){
            return 5000000;
        }else if(exp>50000){
            return 2000000;
        }else {
            return 10000;
        }
    }
    private static String calculateLevel(int exp) {
        if(exp<10000){
            return "F";
        }else if(exp<50000){
            return "E";
        }else if(exp<2000000){
            return "D";
        }else if(exp<5000000){
            return "C";
        }else if(exp<30000000){
            return "B";
        }else if(exp<100000000){
            return "A";
        }else{
            return "S";
        }//To change body of generated methods, choose Tools | Templates.
    }
    
    /**
     * Creates new form HunterGUI
     */
    int uniqueid;
    int exp=0;
    int balance=0;
    public HunterGUI(int hid) {
        uniqueid=hid;
        initComponents();
        display(uniqueid);
        filltheHMList();
        filltheIMList();
        renderCurMissions(hid);
        filltheItemList(hid);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        MainPanel = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        NameLabel = new javax.swing.JLabel();
        BalanceLabel = new javax.swing.JLabel();
        DepositBtn = new javax.swing.JButton();
        LevelLabel = new javax.swing.JLabel();
        RankingLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        ExpProgressBar = new javax.swing.JProgressBar();
        ExperienceLabel = new javax.swing.JLabel();
        TeamLabel = new javax.swing.JLabel();
        TeamRankingLabel = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        currentMissionsList = new javax.swing.JList<>();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemsList = new javax.swing.JList<>();
        jScrollPane10 = new javax.swing.JScrollPane();
        MissionDescriptionText = new javax.swing.JTextArea();
        ForfeitButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        CurrentddlLabel = new javax.swing.JLabel();
        TabbedPanel = new javax.swing.JTabbedPane();
        TeamPanel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        ItemMissonsPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        ItemMissionsList = new javax.swing.JList<>();
        IMNameLabel = new javax.swing.JLabel();
        ImDiffLabel = new javax.swing.JLabel();
        ImExpRewardLabel = new javax.swing.JLabel();
        IMGoldRewardLabel = new javax.swing.JLabel();
        ImReleaseTimeLabel = new javax.swing.JLabel();
        ImRddlLabel = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        ImDescriptionsText = new javax.swing.JTextArea();
        IMAcceptButton = new javax.swing.JButton();
        HuntingMissionPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        HMList = new javax.swing.JList<>();
        HmNameLabel = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        HMdescText = new javax.swing.JTextArea();
        HmDiffLabel = new javax.swing.JLabel();
        HmexpRewardLabel = new javax.swing.JLabel();
        HmGoldRewardLabel = new javax.swing.JLabel();
        HmddlRlabel = new javax.swing.JLabel();
        HMReleaseTimeLabel = new javax.swing.JLabel();
        HMAcceptButton = new javax.swing.JButton();
        LeaderBoardPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jList6 = new javax.swing.JList<>();
        TurnInButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        BackgroundLabel = new javax.swing.JLabel();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(null);

        MainPanel.setOpaque(false);
        MainPanel.setPreferredSize(new java.awt.Dimension(800, 600));

        StatusPanel.setOpaque(false);

        NameLabel.setFont(new java.awt.Font("Luminari", 0, 16)); // NOI18N
        NameLabel.setForeground(new java.awt.Color(255, 255, 255));
        NameLabel.setText("Welcome,  JINGWEI");

        BalanceLabel.setForeground(new java.awt.Color(255, 255, 255));
        BalanceLabel.setText("Balance: 20342");

        DepositBtn.setText("Deposit");
        DepositBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositBtnActionPerformed(evt);
            }
        });

        LevelLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        LevelLabel.setForeground(new java.awt.Color(255, 255, 255));
        LevelLabel.setText("Level: SS");

        RankingLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        RankingLabel.setForeground(new java.awt.Color(255, 255, 255));
        RankingLabel.setText("Ranking:6024");

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("EXP:");

        ExpProgressBar.setValue(80);

        ExperienceLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        ExperienceLabel.setForeground(new java.awt.Color(255, 255, 255));
        ExperienceLabel.setText("4560/6402");

        TeamLabel.setFont(new java.awt.Font("Malayalam Sangam MN", 0, 13)); // NOI18N
        TeamLabel.setForeground(new java.awt.Color(255, 255, 255));
        TeamLabel.setText("Team: Gecko Express ");

        TeamRankingLabel.setFont(new java.awt.Font("Malayalam Sangam MN", 0, 13)); // NOI18N
        TeamRankingLabel.setForeground(new java.awt.Color(255, 255, 255));
        TeamRankingLabel.setText("Team Ranking: 001 ");

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("CurrentMissions:");

        jScrollPane1.setOpaque(false);

        currentMissionsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        currentMissionsList.setOpaque(false);
        jScrollPane1.setOpaque(false);
        jScrollPane1.setViewportView(currentMissionsList);
        currentMissionsList.addListSelectionListener(new ListSelectionListener(){
            @Override
            public void valueChanged(ListSelectionEvent arg0){
                if(!arg0.getValueIsAdjusting()){
                    if(currentMissionsList.getSelectedValue()==null){

                    }else{
                        int id =Integer.valueOf(currentMissionsList.getSelectedValue().toString().split("#")[1]);
                        String what = currentMissionsList.getSelectedValue().toString().split("#")[0];
                        MissionDescriptionText.setText(findDescription(what,id));
                    }

                }
            }
        });

        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Your Items:");

        jScrollPane2.setOpaque(false);

        itemsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(itemsList);

        MissionDescriptionText.setEditable(false);
        MissionDescriptionText.setColumns(20);
        MissionDescriptionText.setRows(5);
        jScrollPane10.setViewportView(MissionDescriptionText);

        ForfeitButton.setText("Forfeit");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Deadline:");

        CurrentddlLabel.setForeground(new java.awt.Color(255, 255, 255));
        CurrentddlLabel.setText("2017.02.02");

        TabbedPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TabbedPanel.setName(""); // NOI18N

        TeamPanel.setOpaque(false);

        jScrollPane6.setOpaque(false);

        javax.swing.GroupLayout TeamPanelLayout = new javax.swing.GroupLayout(TeamPanel);
        TeamPanel.setLayout(TeamPanelLayout);
        TeamPanelLayout.setHorizontalGroup(
            TeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TeamPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                .addContainerGap())
        );
        TeamPanelLayout.setVerticalGroup(
            TeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
        );

        TabbedPanel.addTab("Team", TeamPanel);

        ItemMissonsPanel.setOpaque(false);

        jScrollPane4.setOpaque(false);

        ItemMissionsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(ItemMissionsList);
        ItemMissionsList.addListSelectionListener(new ListSelectionListener(){
            @Override
            public void valueChanged(ListSelectionEvent arg0){
                if(!arg0.getValueIsAdjusting()){
                    String id = (String) ItemMissionsList.getSelectedValue();
                    if(id==null){

                    }else{
                        String tempid = id.split("#")[1];
                        imChangedUpdate(Integer.valueOf(tempid));
                    }
                    //System.out.print(ItemMissionsList.getSelectedValue());

                }
            }
        });

        IMNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        IMNameLabel.setText("MissionID:");

        ImDiffLabel.setForeground(new java.awt.Color(255, 255, 255));
        ImDiffLabel.setText("Difficulty:");

        ImExpRewardLabel.setForeground(new java.awt.Color(255, 255, 255));
        ImExpRewardLabel.setText("Experience Reward:");

        IMGoldRewardLabel.setForeground(new java.awt.Color(255, 255, 255));
        IMGoldRewardLabel.setText("Gold Reward:");

        ImReleaseTimeLabel.setForeground(new java.awt.Color(255, 255, 255));
        ImReleaseTimeLabel.setText("Release Time:");

        ImRddlLabel.setForeground(new java.awt.Color(255, 255, 255));
        ImRddlLabel.setText("Deadline:");

        ImDescriptionsText.setEditable(false);
        ImDescriptionsText.setColumns(20);
        ImDescriptionsText.setRows(100);
        jScrollPane8.setViewportView(ImDescriptionsText);

        IMAcceptButton.setLabel("Accept");
        IMAcceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IMAcceptButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ItemMissonsPanelLayout = new javax.swing.GroupLayout(ItemMissonsPanel);
        ItemMissonsPanel.setLayout(ItemMissonsPanelLayout);
        ItemMissonsPanelLayout.setHorizontalGroup(
            ItemMissonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ItemMissonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ItemMissonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ItemMissonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(ImExpRewardLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(IMGoldRewardLabel)
                        .addComponent(ImReleaseTimeLabel)
                        .addComponent(ImDiffLabel)
                        .addComponent(IMNameLabel))
                    .addComponent(ImRddlLabel)
                    .addComponent(IMAcceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        ItemMissonsPanelLayout.setVerticalGroup(
            ItemMissonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jScrollPane4)
            .addGroup(ItemMissonsPanelLayout.createSequentialGroup()
                .addComponent(IMNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ImDiffLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ImExpRewardLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(IMGoldRewardLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ImReleaseTimeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ImRddlLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IMAcceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        IMAcceptButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                String id = (String) ItemMissionsList.getSelectedValue().split("#")[1];
                System.out.print("Pressed!!!"+id);
                acceptItemMission(Integer.valueOf(id));
            }
        });

        TabbedPanel.addTab("ItemMissions", ItemMissonsPanel);

        HuntingMissionPanel.setOpaque(false);

        HMList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(HMList);
        HMList.addListSelectionListener(new ListSelectionListener(){
            @Override
            public void valueChanged(ListSelectionEvent arg0){
                if(!arg0.getValueIsAdjusting()){
                    String temp = (String) HMList.getSelectedValue();
                    if(temp ==null){

                    }else{
                        int id = Integer.valueOf(temp.split("#")[1]);
                        hmChangedUpdate(id);
                    }

                }
            }
        });

        HmNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        HmNameLabel.setText("MissionID:");

        HMdescText.setEditable(false);
        HMdescText.setColumns(20);
        HMdescText.setRows(100);
        jScrollPane7.setViewportView(HMdescText);

        HmDiffLabel.setForeground(new java.awt.Color(255, 255, 255));
        HmDiffLabel.setText("Difficulty:");

        HmexpRewardLabel.setForeground(new java.awt.Color(255, 255, 255));
        HmexpRewardLabel.setText("Experience Reward:");

        HmGoldRewardLabel.setForeground(new java.awt.Color(255, 255, 255));
        HmGoldRewardLabel.setText("Gold Reward:");

        HmddlRlabel.setForeground(new java.awt.Color(255, 255, 255));
        HmddlRlabel.setText("Deadline:");

        HMReleaseTimeLabel.setForeground(new java.awt.Color(255, 255, 255));
        HMReleaseTimeLabel.setText("Release Time:");

        HMAcceptButton.setLabel("Accept");
        HMAcceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HMAcceptButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HuntingMissionPanelLayout = new javax.swing.GroupLayout(HuntingMissionPanel);
        HuntingMissionPanel.setLayout(HuntingMissionPanelLayout);
        HuntingMissionPanelLayout.setHorizontalGroup(
            HuntingMissionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HuntingMissionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HuntingMissionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(HmNameLabel)
                    .addComponent(HmDiffLabel)
                    .addComponent(HmexpRewardLabel)
                    .addComponent(HmGoldRewardLabel)
                    .addComponent(HmddlRlabel)
                    .addComponent(HMReleaseTimeLabel)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HMAcceptButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(59, 59, Short.MAX_VALUE))
        );
        HuntingMissionPanelLayout.setVerticalGroup(
            HuntingMissionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HuntingMissionPanelLayout.createSequentialGroup()
                .addGroup(HuntingMissionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(HuntingMissionPanelLayout.createSequentialGroup()
                        .addComponent(HmNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HmDiffLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HmexpRewardLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HmGoldRewardLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HMReleaseTimeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HmddlRlabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HMAcceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        HMAcceptButton.getAccessibleContext().setAccessibleName("\"\"");
        HMAcceptButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                String id = (String) HMList.getSelectedValue().split("#")[1];
                acceptHuntingMission(Integer.valueOf(id));
            }
        });

        TabbedPanel.addTab("HuntingMissions", HuntingMissionPanel);

        LeaderBoardPanel.setOpaque(false);

        jScrollPane3.setOpaque(false);

        jList3.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList3.setOpaque(false);
        jScrollPane3.setViewportView(jList3);

        jLabel23.setText("HUNTER:");

        jLabel24.setText("TEAM:");

        jList6.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane9.setViewportView(jList6);

        javax.swing.GroupLayout LeaderBoardPanelLayout = new javax.swing.GroupLayout(LeaderBoardPanel);
        LeaderBoardPanel.setLayout(LeaderBoardPanelLayout);
        LeaderBoardPanelLayout.setHorizontalGroup(
            LeaderBoardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
            .addGroup(LeaderBoardPanelLayout.createSequentialGroup()
                .addGroup(LeaderBoardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane9)
        );
        LeaderBoardPanelLayout.setVerticalGroup(
            LeaderBoardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeaderBoardPanelLayout.createSequentialGroup()
                .addComponent(jLabel23)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
        );

        TabbedPanel.addTab("LeaderBoard", LeaderBoardPanel);

        TurnInButton.setText("Turn in");
        TurnInButton.setLabel("Turn In");
        TurnInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TurnInButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout StatusPanelLayout = new javax.swing.GroupLayout(StatusPanel);
        StatusPanel.setLayout(StatusPanelLayout);
        StatusPanelLayout.setHorizontalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StatusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StatusPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(4, 4, 4)
                        .addComponent(ExperienceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ExpProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(StatusPanelLayout.createSequentialGroup()
                        .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(StatusPanelLayout.createSequentialGroup()
                                .addComponent(TurnInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ForfeitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2)
                    .addGroup(StatusPanelLayout.createSequentialGroup()
                        .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NameLabel)
                            .addComponent(TeamLabel)
                            .addComponent(TeamRankingLabel)
                            .addGroup(StatusPanelLayout.createSequentialGroup()
                                .addComponent(LevelLabel)
                                .addGap(27, 27, 27)
                                .addComponent(RankingLabel))
                            .addGroup(StatusPanelLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CurrentddlLabel)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(StatusPanelLayout.createSequentialGroup()
                        .addComponent(BalanceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DepositBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TabbedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        StatusPanelLayout.setVerticalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(TabbedPanel)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, StatusPanelLayout.createSequentialGroup()
                        .addComponent(NameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BalanceLabel)
                            .addComponent(DepositBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LevelLabel)
                            .addComponent(RankingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ExperienceLabel)
                                .addComponent(jLabel6))
                            .addComponent(ExpProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TeamLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TeamRankingLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel2)
                            .addComponent(CurrentddlLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(StatusPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TurnInButton, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .addComponent(ForfeitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(StatusPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel11)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        NameLabel.getAccessibleContext().setAccessibleName("");
        TabbedPanel.getAccessibleContext().setAccessibleName("");
        TurnInButton.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StatusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(StatusPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        getContentPane().add(MainPanel);
        MainPanel.setBounds(0, 0, 800, 600);

        jPanel5.setBackground(new Color(0,0,0,200));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 820, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel5);
        jPanel5.setBounds(0, 0, 820, 600);

        BackgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Hunter/u=3614819154,3895031968&fm=214&gp=0.jpg"))); // NOI18N
        getContentPane().add(BackgroundLabel);
        BackgroundLabel.setBounds(0, 0, 800, 600);
    }// </editor-fold>//GEN-END:initComponents

    private void DepositBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepositBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DepositBtnActionPerformed

    private void HMAcceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HMAcceptButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HMAcceptButtonActionPerformed

    private void TurnInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TurnInButtonActionPerformed
        // TODO add your handling code here:
        String field = currentMissionsList.getSelectedValue().toString().split("#")[0];
        int mid = Integer.valueOf(currentMissionsList.getSelectedValue().toString().split("#")[1]);
        if(field.trim().equals("ItemMission")){
            turninItemMission(mid);
        }else{
            turninHuntingMission(mid);
        }
        //if()
    }//GEN-LAST:event_TurnInButtonActionPerformed

    private void IMAcceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IMAcceptButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IMAcceptButtonActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        
//        
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(HunterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(HunterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(HunterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(HunterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        
//        
//        
//       
//        
//        //</editor-fold>
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new HunterGUI().setVisible(true);
//            }
//        });
//        
//        
//        
//        
//    }
    
    public void acceptHuntingMission(int hmid){
        System.out.print("up!!");

        LocalDateTime now = LocalDateTime.now();
        String current =now.getYear()+"-"+now.getMonthValue()+"-"+now.getDayOfMonth();
        System.out.print(now.getYear()+"-"+now.getMonth()+"-"+now.getDayOfMonth());
        String acceptSql="UPDATE HUNTING_MISSIONS"+
                " SET HUNTERID="+uniqueid+", ACCEPTTIME = "+current+
                " WHERE HUNTINGMISSIONID="+hmid;
        System.out.print(acceptSql);
        try{
            Connection con = Connector.getConnection();
            Statement stmt = con.createStatement();
            stmt.execute(acceptSql);
            filltheHMList();
            renderCurMissions(uniqueid);
        }catch(SQLException ex){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void acceptItemMission(int imid){
        System.out.print("OHHup!!");
        DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd");
        LocalDateTime now = LocalDateTime.now();
        String current =now.getYear()+"-"+now.getMonthValue()+"-"+now.getDayOfMonth();
        System.out.print(now.getYear()+"-"+now.getMonth()+"-"+now.getDayOfMonth());
        String acceptSql="UPDATE ITEM_FORAGING_MISSION"+
                " SET HUNTERID = "+uniqueid+", ACCEPTTIME = "+current+
                " WHERE ITEMMISSIONID = "+imid;
        System.out.print(acceptSql);
        try{
            Connection con = Connector.getConnection();
            Statement stmt = con.createStatement();
            stmt.execute(acceptSql);
            filltheIMList();
            renderCurMissions(uniqueid);
        }catch(SQLException ex){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void turninHuntingMission(int hmid){
        int addedBalance = 0;
        int addedExp = 0;
        int finalBalance = balance;
        int finalexp = exp;
        DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd");
        LocalDateTime now = LocalDateTime.now();
        String current =now.getYear()+"-"+now.getMonthValue()+"-"+now.getDayOfMonth();
        System.out.print(now.getYear()+"-"+now.getMonth()+"-"+now.getDayOfMonth());
        String acceptSql="UPDATE HUNTING_MISSIONS"+
                " SET HUNTERID = "+uniqueid+", COMPLETIONTIME = "+current+
                " WHERE HUNTINGMISSIONID = "+hmid;
        System.out.print(acceptSql);
        try{
            Connection con = Connector.getConnection();
            Statement stmt = con.createStatement();
            stmt.executeQuery(acceptSql);
            String gettingsql ="SELECT * FROM HUNTING_MISSIONS"+
                    " WHERE HUNTINGMISSIONID="+hmid;
            
            ResultSet rs = stmt.executeQuery(gettingsql);
            while(rs.next()){
                addedBalance = rs.getInt("GOLDREWARD");
                addedExp = rs.getInt("EXPREWARD");
            }
        }catch(SQLException ex){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        finalBalance = balance+addedBalance;
        finalexp=exp+addedExp;
        try{
            Connection con = Connector.getConnection();
            Statement stmt = con.createStatement();
            String updatesql="UPDATE HUNTER"+
                " SET GOLDBALANCE = "+finalBalance+", EXPERIENCE = "+finalexp+
                " WHERE HUNTERID = "+uniqueid;
            //stmt.executeQuery(updatesql);
            display(uniqueid);
        }catch(SQLException ex){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        renderCurMissions(uniqueid);
    }
    
     public void turninItemMission(int imid){
         System.out.print("I am turn in item missions right now");
        int addedBalance = 0;
        int addedExp = 0;
        int finalBalance = balance;
        int finalexp = exp;
        DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd");
        LocalDateTime now = LocalDateTime.now();
        String current =now.getYear()+"-"+now.getMonthValue()+"-"+now.getDayOfMonth();
        System.out.print(now.getYear()+"-"+now.getMonth()+"-"+now.getDayOfMonth());
        String acceptSql="UPDATE ITEM_FORAGING_MISSION"+
                " SET HUNTERID = "+uniqueid+", COMPLETETIME = '"+current+
                "' WHERE ITEMMISSIONID = "+imid;
        System.out.print(acceptSql);
        try{
            Connection con = Connector.getConnection();
            Statement stmt =  con.createStatement();
            stmt.executeQuery(acceptSql);
            String gettingsql ="SELECT * FROM ITEM_FORAGING_MISSION"+
                    " WHERE ITEMMISSIONID="+imid;
            
            ResultSet rs = stmt.executeQuery(gettingsql);
            while(rs.next()){
                addedBalance = rs.getInt("GOLDREWARD");
                addedExp = rs.getInt("EXPREWARD");
            }
            
        }catch(SQLException ex){
            ex.printStackTrace();
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        finalBalance = balance+addedBalance;
        finalexp=exp+addedExp;
        try{
            Connection con = Connector.getConnection();
            Statement stmt = con.createStatement();
            String updatesql="UPDATE HUNTER"+
                " SET GOLDBALANCE = "+finalBalance+", EXPERIENCE = "+finalexp+
                " WHERE HUNTERID = "+uniqueid;
            //stmt.executeQuery(updatesql);
            display(uniqueid);
        }catch(SQLException ex){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void hmChangedUpdate(int hmid){
        try{
            Connection con = Connector.getConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM HUNTING_MISSIONS"+
                    " WHERE HUNTINGMISSIONID = "+hmid); 
            while(rs.next()){
               //int temphid = rs.getInt("HUNTERID");
               String tempddl = rs.getString("DEADLINE");
               String tempdesc = rs.getString("DESCRIPTION");
               int tempexpReward = rs.getInt("EXPREWARD");
               int tempgoldReward = rs.getInt("GOLDREWARD");
               String tempstartTime = rs.getString("STARTTIME");
               HmNameLabel.setText("MissionID: "+ String.valueOf(hmid));
               HmexpRewardLabel.setText("Experience Reward: "+String.valueOf(tempexpReward));
               HmGoldRewardLabel.setText("Gold Reward: "+String.valueOf(tempgoldReward));
               HMReleaseTimeLabel.setText("Release Time: "+tempstartTime);
               HmddlRlabel.setText("Deadline: "+tempddl);
               HMdescText.setText(tempdesc);
            }
        }catch(SQLException ex){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void imChangedUpdate(int imid){
        try{
            Connection con = Connector.getConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM ITEM_FORAGING_MISSION"+
                    " WHERE ITEMMISSIONID="+imid); 
            while(rs.next()){
               //int tempmid = rs.getInt("HUNTINGMISSIONID");
               //int temphid = rs.getInt("HUNTERID");
               String tempddl = rs.getString("DEADLINE");
               String tempdesc = rs.getString("DESCRIPTION");
               int tempexpReward = rs.getInt("EXPREWARD");
               int tempgoldReward = rs.getInt("GOLDREWARD");
               String tempstartTime = rs.getString("STARTTIME");
               IMNameLabel.setText("MissionID: "+ String.valueOf(imid));
               ImExpRewardLabel.setText("Experience Reward: "+String.valueOf(tempexpReward));
               IMGoldRewardLabel.setText("Gold Reward: "+String.valueOf(tempgoldReward));
               ImReleaseTimeLabel.setText("Release Time: "+tempstartTime);
               ImRddlLabel.setText("Deadline: "+tempddl);
               ImDescriptionsText.setText(tempdesc);
            }
           
        }catch(SQLException ex){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public String findDescription(String field, int id){
        String description ="";
        try{
            Connection con = Connector.getConnection();
            Statement stmt = con.createStatement();
            ResultSet rs;
            
            if(field.equals("ItemMission")){
                rs = stmt.executeQuery("SELECT * FROM ITEM_FORAGING_MISSION"+
                    " WHERE ITEMMISSIONID="+id); 
            }else{
                rs = stmt.executeQuery("SELECT * FROM HUNTING_MISSIONS"+
                    " WHERE HUNTINGMISSIONID="+id);
            }
            while(rs.next()){
                description = rs.getString("DESCRIPTION");
            }
    
        }catch(SQLException ex){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        return description;
    }
    public void renderCurMissions(int hid){
        ArrayList Hmids = new ArrayList();
        ArrayList Hdescriptions = new ArrayList();
        ArrayList Hddls = new ArrayList();
        ArrayList Imids = new ArrayList();
        ArrayList Idescriptions = new ArrayList();
        ArrayList Iddls = new ArrayList();
        try{
           Connection con = Connector.getConnection();
           Statement stmt = con.createStatement();
           ResultSet rs2 = stmt.executeQuery("SELECT * FROM HUNTING_MISSIONS"+
                    " WHERE HUNTERID = "+hid+
                   " INTERSECT "+
                   "SELECT * FROM HUNTING_MISSIONS"+
                   " WHERE COMPLETIONTIME IS NULL"); 
          
           while(rs2.next()){
               int tempmid = rs2.getInt("HUNTINGMISSIONID");
               int temphid = rs2.getInt("HUNTERID");
               String tempddl = rs2.getString("DEADLINE");
               String tempdesc = rs2.getString("DESCRIPTION");
               if(temphid==hid){
                  Hmids.add(tempmid);
                  Hdescriptions.add(tempdesc);
                  Hddls.add(tempddl);
               }
           }
         
       }catch(SQLException ex){
           Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
       }
        try{
            Connection con = Connector.getConnection();
            Statement stmt = con.createStatement();
            ResultSet rs3 = stmt.executeQuery("SELECT * FROM ITEM_FORAGING_MISSION"+
                    " WHERE HUNTERID = "+hid+
                   " INTERSECT "+
                   "SELECT * FROM ITEM_FORAGING_MISSION"+
                   " WHERE COMPLETETIME IS NULL"); 
            while(rs3.next()){
               int tempmid = rs3.getInt("ITEMMISSIONID");
               int temphid = rs3.getInt("HUNTERID");
               String tempddl = rs3.getString("DEADLINE");
               String tempdesc = rs3.getString("DESCRIPTION");
               if(temphid==hid){
                  Imids.add(tempmid);
                  Idescriptions.add(tempdesc);
                  Iddls.add(tempddl);
               }
            }
           DefaultListModel listModel = new DefaultListModel();
           for(int i=0;i<Hmids.size();i++){
               listModel.addElement("HuntingMission #"+Hmids.get(i));
           }
           for(int in=0;in<Imids.size();in++){
               listModel.addElement("ItemMission #"+Imids.get(in));
           }
           //System.out.print(Hmids.get(0));
           currentMissionsList.setModel(listModel);
        }catch(SQLException ex){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void filltheIMList(){
        try{
            Connection con = Connector.getConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM ITEM_FORAGING_MISSION"); 
            DefaultListModel listModel = new DefaultListModel();
            while(rs.next()){
                int tempid = rs.getInt("ITEMMISSIONID");
                String tempacceptTime = rs.getString("ACCEPTTIME");
                if(tempacceptTime ==null){
                    listModel.addElement("ItemMission#"+tempid);
                }
            }
            System.out.print("WOW");
            ItemMissionsList.setModel(listModel);
        }catch(SQLException ex){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void filltheHMList(){
        try{
            Connection con = Connector.getConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM HUNTING_MISSIONS"); 
            DefaultListModel listModel = new DefaultListModel();
            while(rs.next()){
                int tempid = rs.getInt("HUNTINGMISSIONID");
                String tempacceptTime = rs.getString("ACCEPTTIME");
                if(tempacceptTime ==null){
                    listModel.addElement("HuntingMission#"+tempid);
                }
            }
            System.out.print("WOW2");
            HMList.setModel(listModel);
        }catch(SQLException ex){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void filltheItemList(int hid){
        try{
            Connection con = Connector.getConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM ITEM "+
                    "WHERE HUNTERID="+hid);
            DefaultListModel listModel = new DefaultListModel();
            while(rs.next()){
                String itemnm = rs.getString("ITEMNAME");
                listModel.addElement(itemnm);
            }
            System.out.print("WOWITEM");
            itemsList.setModel(listModel);
        }catch(SQLException ex){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
   
   
    public void display(int hid){
        String hname;
        int goldbalance = 0;
        String level;
        int Ranking;
        String team;
        String teamRank;
        String[] curMissions;
        Object[] items;
        
        
        Connection con = Connector.getConnection();
        try {
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM HUNTER"+
                    " WHERE HUNTERID="+hid); 
            while(rs.next()){
                hname=rs.getString("NAME");
                exp=rs.getInt("EXPERIENCE");
                goldbalance=rs.getInt("GOLDBALANCE");
                balance=goldbalance;
                BalanceLabel.setText("GoldBalance: "+String.valueOf(goldbalance));
                level=calculateLevel(exp);
                NameLabel.setText("Welcome  "+hname);
                LevelLabel.setText("Level: "+level);
                ExperienceLabel.setText(String.valueOf(exp)+"/"+String.valueOf(findTheExp(exp)));
                ExpProgressBar.setMinimum(0);
                ExpProgressBar.setMaximum(100);
                double ratio = (100*exp/10000);
                System.out.println(exp);
                System.out.println(findTheExp(exp));
                System.out.println(ratio);
                ExpProgressBar.setValue((int) ratio);
                team=rs.getString("TEAMNAME");
                if(team!=null){
                    TeamLabel.setText("TeamName: "+team);
                }else{
                    TeamLabel.setText("No Team");
                    TeamRankingLabel.setVisible(false);
                }
            }
            System.out.println(rs);
        } catch (SQLException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       renderCurMissions(hid);
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BackgroundLabel;
    private javax.swing.JLabel BalanceLabel;
    private javax.swing.JLabel CurrentddlLabel;
    private javax.swing.JButton DepositBtn;
    private javax.swing.JProgressBar ExpProgressBar;
    private javax.swing.JLabel ExperienceLabel;
    private javax.swing.JButton ForfeitButton;
    public javax.swing.JButton HMAcceptButton;
    private javax.swing.JList<String> HMList;
    private javax.swing.JLabel HMReleaseTimeLabel;
    private javax.swing.JTextArea HMdescText;
    private javax.swing.JLabel HmDiffLabel;
    private javax.swing.JLabel HmGoldRewardLabel;
    private javax.swing.JLabel HmNameLabel;
    private javax.swing.JLabel HmddlRlabel;
    private javax.swing.JLabel HmexpRewardLabel;
    private javax.swing.JPanel HuntingMissionPanel;
    private javax.swing.JButton IMAcceptButton;
    private javax.swing.JLabel IMGoldRewardLabel;
    private javax.swing.JLabel IMNameLabel;
    private javax.swing.JTextArea ImDescriptionsText;
    private javax.swing.JLabel ImDiffLabel;
    private javax.swing.JLabel ImExpRewardLabel;
    private javax.swing.JLabel ImRddlLabel;
    private javax.swing.JLabel ImReleaseTimeLabel;
    private javax.swing.JList<String> ItemMissionsList;
    private javax.swing.JPanel ItemMissonsPanel;
    private javax.swing.JPanel LeaderBoardPanel;
    private javax.swing.JLabel LevelLabel;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JTextArea MissionDescriptionText;
    private javax.swing.JLabel NameLabel;
    private javax.swing.JLabel RankingLabel;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane TabbedPanel;
    private javax.swing.JLabel TeamLabel;
    private javax.swing.JPanel TeamPanel;
    private javax.swing.JLabel TeamRankingLabel;
    private javax.swing.JButton TurnInButton;
    private javax.swing.JList<String> currentMissionsList;
    private javax.swing.JList<String> itemsList;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jList3;
    private javax.swing.JList<String> jList6;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    // End of variables declaration//GEN-END:variables
}
