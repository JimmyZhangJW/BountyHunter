/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Leaderboard;

import static Main.Connector.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author omar
 */
public class LeaderBoardPanel extends javax.swing.JPanel {

    /**
     * Creates new form LeaderBoardPanel
     */
    public LeaderBoardPanel() {
        initComponents();
        mHunterLeaderboardTable.setEnabled(false);
        mTeamLeaderboardTable.setEnabled(false);
        mLeaderBoardTabs.addChangeListener(new ChangeListener(){
            @Override
            public void stateChanged(ChangeEvent e) {
                switch (mLeaderBoardTabs.getSelectedIndex()){
                    case (0):
                        updateHunterTable();
                        break;
                    case (1):
                        updateTeamTable();
                        break;
                    case(2):
                        updateGeneralTable();
                        updateGeneralStats();
                        break;
                }
          }
        });
        updateHunterTable();
    }

    /*
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mLeaderBoardTabs = new javax.swing.JTabbedPane();
        mHunterLeaderboardPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        mHunterSortbyCombo = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        mHunterSearchText = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        mHunterLeaderboardTable = new javax.swing.JTable();
        mTeamLeaderboardPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        mTeamLeaderboardTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        mTeamSearchText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        mTeamSortbyCombo = new javax.swing.JComboBox<>();
        mItemLeaderboardPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        mItemSortbyCombo = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        mItemLeaderboardTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        mAverageTeamExpText = new javax.swing.JLabel();
        mAverageHunterExpText = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1000, 600));
        setRequestFocusEnabled(false);

        mLeaderBoardTabs.setPreferredSize(new java.awt.Dimension(1000, 600));

        mHunterLeaderboardPanel.setPreferredSize(new java.awt.Dimension(800, 600));

        jLabel10.setText("Sort by:");

        mHunterSortbyCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Experience", "GoldBalance" }));
        mHunterSortbyCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mHunterSortbyComboActionPerformed(evt);
            }
        });

        jLabel11.setText("Find Hunter:");

        mHunterSearchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mHunterSearchTextActionPerformed(evt);
            }
        });

        mHunterLeaderboardTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Gender", "Exp", "Gold"
            }
        ));
        jScrollPane2.setViewportView(mHunterLeaderboardTable);

        javax.swing.GroupLayout mHunterLeaderboardPanelLayout = new javax.swing.GroupLayout(mHunterLeaderboardPanel);
        mHunterLeaderboardPanel.setLayout(mHunterLeaderboardPanelLayout);
        mHunterLeaderboardPanelLayout.setHorizontalGroup(
            mHunterLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mHunterLeaderboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mHunterLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 971, Short.MAX_VALUE)
                    .addGroup(mHunterLeaderboardPanelLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mHunterSearchText, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(mHunterSortbyCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mHunterLeaderboardPanelLayout.setVerticalGroup(
            mHunterLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mHunterLeaderboardPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(mHunterLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(mHunterSearchText, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mHunterSortbyCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                .addContainerGap())
        );

        mLeaderBoardTabs.addTab("Hunters", mHunterLeaderboardPanel);

        mTeamLeaderboardTable.setAutoCreateRowSorter(true);
        mTeamLeaderboardTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Team Name", "Team Captain", "Average Experience", "Number of Members"
            }
        ));
        mTeamLeaderboardTable.setToolTipText("");
        jScrollPane3.setViewportView(mTeamLeaderboardTable);

        jLabel1.setText("Find Team:");

        mTeamSearchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mTeamSearchTextActionPerformed(evt);
            }
        });

        jLabel2.setText("Sort by:");

        mTeamSortbyCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Average Experience", "Number of Members" }));
        mTeamSortbyCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mTeamSortbyComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mTeamLeaderboardPanelLayout = new javax.swing.GroupLayout(mTeamLeaderboardPanel);
        mTeamLeaderboardPanel.setLayout(mTeamLeaderboardPanelLayout);
        mTeamLeaderboardPanelLayout.setHorizontalGroup(
            mTeamLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mTeamLeaderboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mTeamLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 971, Short.MAX_VALUE)
                    .addGroup(mTeamLeaderboardPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mTeamSearchText, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mTeamSortbyCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mTeamLeaderboardPanelLayout.setVerticalGroup(
            mTeamLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mTeamLeaderboardPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(mTeamLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mTeamLeaderboardPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(mTeamSortbyCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mTeamLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(mTeamSearchText, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                .addContainerGap())
        );

        mLeaderBoardTabs.addTab("Teams", mTeamLeaderboardPanel);

        jLabel3.setText("Hunters with all ");

        jLabel4.setText("rank items");

        mItemSortbyCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "S", "A", "B", "C", "D" }));
        mItemSortbyCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemSortbyComboActionPerformed(evt);
            }
        });

        mItemLeaderboardTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Ranking", "Name", "Exp", "Level", "Gold", "Age", "Gender"
            }
        ));
        jScrollPane4.setViewportView(mItemLeaderboardTable);

        jLabel5.setText("Average Team Experience: ");

        jLabel6.setText("Average Hunter Experience:");

        mAverageTeamExpText.setText("none");

        mAverageHunterExpText.setText("none");

        javax.swing.GroupLayout mItemLeaderboardPanelLayout = new javax.swing.GroupLayout(mItemLeaderboardPanel);
        mItemLeaderboardPanel.setLayout(mItemLeaderboardPanelLayout);
        mItemLeaderboardPanelLayout.setHorizontalGroup(
            mItemLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mItemLeaderboardPanelLayout.createSequentialGroup()
                .addGroup(mItemLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mItemLeaderboardPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4))
                    .addGroup(mItemLeaderboardPanelLayout.createSequentialGroup()
                        .addGap(348, 348, 348)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mItemSortbyCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addGap(0, 375, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(mItemLeaderboardPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(mItemLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(25, 25, 25)
                .addGroup(mItemLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mAverageTeamExpText)
                    .addComponent(mAverageHunterExpText))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mItemLeaderboardPanelLayout.setVerticalGroup(
            mItemLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mItemLeaderboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mItemLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(mAverageTeamExpText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mItemLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(mAverageHunterExpText))
                .addGap(22, 22, 22)
                .addGroup(mItemLeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(mItemSortbyCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                .addContainerGap())
        );

        mLeaderBoardTabs.addTab("General", mItemLeaderboardPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mLeaderBoardTabs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mLeaderBoardTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                .addContainerGap())
        );

        mLeaderBoardTabs.getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    private void mHunterSortbyComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mHunterSortbyComboActionPerformed
        updateHunterTable();
    }//GEN-LAST:event_mHunterSortbyComboActionPerformed

    private void mHunterSearchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mHunterSearchTextActionPerformed
        updateHunterTable();
    }//GEN-LAST:event_mHunterSearchTextActionPerformed

    private void mTeamSearchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mTeamSearchTextActionPerformed
        updateTeamTable();
    }//GEN-LAST:event_mTeamSearchTextActionPerformed

    private void mTeamSortbyComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mTeamSortbyComboActionPerformed
        updateTeamTable();
    }//GEN-LAST:event_mTeamSortbyComboActionPerformed

    private void mItemSortbyComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemSortbyComboActionPerformed
        updateGeneralTable();
    }//GEN-LAST:event_mItemSortbyComboActionPerformed

    private void updateTeamTable(){
                String selection = (String) mTeamSortbyCombo.getSelectedItem();
        String searchText = (String) mTeamSearchText.getText();
        Connection con = getConnection();
        Statement stmt;
        if(selection.equals("Number of Members")){
            selection = "numMembers";
        }else{
            selection = "AVGEXP";
        }
        try {
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(
                    "SELECT A.TEAMNAME, B.CPTNAME, A.AVGEXP, A.numMembers " +
                    "FROM " +
                    "(SELECT T.TEAMNAME, AVG(H.EXPERIENCE) AvgExp, COUNT(H.HUNTERID) numMembers " +
                    "FROM HUNTER H, TEAM T " +
                    "WHERE H.TEAMNAME = T.TEAMNAME " +
                    "GROUP BY T.TEAMNAME ) A " +
                    "INNER JOIN " +
                    "(SELECT T.TEAMNAME, H.NAME CPTNAME " +
                    "FROM HUNTER H, TEAM T " +
                    "WHERE T.HUNTERID = H.HUNTERID)  B " +
                    "ON A.TEAMNAME = B.TEAMNAME " +
                    "WHERE A.TEAMNAME LIKE '%" + searchText + "%' " +
                    "ORDER BY A." + selection + " DESC");
            DefaultTableModel tableModel = (DefaultTableModel) mTeamLeaderboardTable.getModel();
            tableModel.setRowCount(0);
            while(rs.next()){
                String[] data = new String[4];
                data[0] = rs.getString(1); //NAME
                data[1] = rs.getString(2); //CPTNAME
                data[2] = rs.getString(3); //AVGEXP
                data[3] = rs.getString(4); //numMemebers
                tableModel.addRow(data);
            }
            tableModel.fireTableDataChanged();
        } catch (SQLException ex) {
            Logger.getLogger(LeaderBoardPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        closeConnection();
    }
    
    private void updateHunterTable(){
        String searchText = (String) mHunterSearchText.getText();
        System.out.println(searchText);
        String selection = (String) mHunterSortbyCombo.getSelectedItem();
        Connection con = getConnection();
        Statement stmt;
        try {
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(
                    "SELECT H.NAME, H.AGE, H.GENDER, H.EXPERIENCE, H.GOLDBALANCE " +
                    "FROM HUNTER H " +
                    "WHERE H.NAME LIKE '%" + searchText + "%' " +
                    "ORDER BY H." +  selection + " DESC");
            DefaultTableModel tableModel = (DefaultTableModel) mHunterLeaderboardTable.getModel();
            tableModel.setRowCount(0);
            while(rs.next()){
                String[] data = new String[5];
                data[0] = rs.getString(1); //NAME
                data[1] = rs.getString(2); //AGE
                data[2] = rs.getString(3); //GENDER
                data[3] = rs.getString(4); //EXPERIENCE
                data[4] = rs.getString(5); //GOLDBALANCE
                tableModel.addRow(data);
            }
            tableModel.fireTableDataChanged();
        } catch (SQLException ex) {
            Logger.getLogger(LeaderBoardPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        closeConnection();
    }
    
    private void updateGeneralStats(){
        Connection con = getConnection();
        Statement stmt;
        try {
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(
                    "SELECT AVG(AvgExp) AvgTeamExp " +
                    "FROM(" +
                    "SELECT T.TEAMNAME, AVG(H.EXPERIENCE) AvgExp "  +
                    "FROM HUNTER H, TEAM T " +
                    "WHERE H.TEAMNAME = T.TEAMNAME " +
                    "GROUP BY T.TEAMNAME)");
            
            rs.next();
            mAverageTeamExpText.setText(rs.getString(1));
            
            rs = stmt.executeQuery(
                    "SELECT AVG(H.EXPERIENCE) " +
                    "FROM HUNTER H");
            
            rs.next();
            mAverageHunterExpText.setText(rs.getString(1));
            
        } catch (SQLException ex) {
            Logger.getLogger(LeaderBoardPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        closeConnection();
    }
    
    private void updateGeneralTable(){
        String selection = (String) mItemSortbyCombo.getSelectedItem();
        Connection con = getConnection();
        Statement stmt;
        try {
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(
                    "SELECT H.NAME, H.AGE, H.GENDER, H.EXPERIENCE, H.GOLDBALANCE " +
                    "FROM HUNTER H " +
                    "WHERE NOT EXISTS( " +
                    "(SELECT I.ITEMID FROM ITEM I WHERE I.ITEMRANK = '"+ selection + "' ) " +
                    "MINUS " +
                    "(SELECT I2.ITEMID FROM ITEM I2 " +
                    "WHERE I2.HUNTERID = H.HUNTERID AND I2.ITEMRANK = '"+ selection +"' ))");
            DefaultTableModel tableModel = (DefaultTableModel) mItemLeaderboardTable.getModel();
            tableModel.setRowCount(0);
            while(rs.next()){
                String[] data = new String[5];
                data[0] = rs.getString(1); //NAME
                data[1] = rs.getString(2); //AGE
                data[2] = rs.getString(3); //GENDER
                data[3] = rs.getString(4); //EXPERIENCE
                data[4] = rs.getString(5); //GOLDBALANCE
                tableModel.addRow(data);
            }
            tableModel.fireTableDataChanged();
        } catch (SQLException ex) {
            Logger.getLogger(LeaderBoardPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        closeConnection();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel mAverageHunterExpText;
    private javax.swing.JLabel mAverageTeamExpText;
    private javax.swing.JPanel mHunterLeaderboardPanel;
    private javax.swing.JTable mHunterLeaderboardTable;
    private javax.swing.JTextField mHunterSearchText;
    private javax.swing.JComboBox<String> mHunterSortbyCombo;
    private javax.swing.JPanel mItemLeaderboardPanel;
    private javax.swing.JTable mItemLeaderboardTable;
    private javax.swing.JComboBox<String> mItemSortbyCombo;
    private javax.swing.JTabbedPane mLeaderBoardTabs;
    private javax.swing.JPanel mTeamLeaderboardPanel;
    private javax.swing.JTable mTeamLeaderboardTable;
    private javax.swing.JTextField mTeamSearchText;
    private javax.swing.JComboBox<String> mTeamSortbyCombo;
    // End of variables declaration//GEN-END:variables
}
